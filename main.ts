// OLED Display Driver for MicroBit using SPI

//% weight=100 color=#1e4179 icon="\uf108" block="Knox SPI OLED"
namespace OLED {
    let CS = DigitalPin.P14
    let DC = DigitalPin.P12
    let RES = DigitalPin.P16

    // Font data for 5x7 ASCII characters (from 32 to 126)
    const font: number[][] = [
        [0x00, 0x00, 0x00, 0x00, 0x00], // Space ' '
        [0x00, 0x00, 0x5F, 0x00, 0x00], // '!'
        [0x00, 0x07, 0x00, 0x07, 0x00], // '"'
        [0x14, 0x7F, 0x14, 0x7F, 0x14], // '#'
        [0x24, 0x2A, 0x7F, 0x2A, 0x12], // '$'
        [0x23, 0x13, 0x08, 0x64, 0x62], // '%'
        [0x36, 0x49, 0x55, 0x22, 0x50], // '&'
        [0x00, 0x05, 0x03, 0x00, 0x00], // '''
        [0x00, 0x1C, 0x22, 0x41, 0x00], // '('
        [0x00, 0x41, 0x22, 0x1C, 0x00], // ')'
        [0x14, 0x08, 0x3E, 0x08, 0x14], // '*'
        [0x08, 0x08, 0x3E, 0x08, 0x08], // '+'
        [0x00, 0x50, 0x30, 0x00, 0x00], // ','
        [0x08, 0x08, 0x08, 0x08, 0x08], // '-'
        [0x00, 0x60, 0x60, 0x00, 0x00], // '.'
        [0x20, 0x10, 0x08, 0x04, 0x02], // '/'
        [0x3E, 0x51, 0x49, 0x45, 0x3E], // '0'
        [0x00, 0x42, 0x7F, 0x40, 0x00], // '1'
        [0x42, 0x61, 0x51, 0x49, 0x46], // '2'
        [0x21, 0x41, 0x45, 0x4B, 0x31], // '3'
        [0x18, 0x14, 0x12, 0x7F, 0x10], // '4'
        [0x27, 0x45, 0x45, 0x45, 0x39], // '5'
        [0x3C, 0x4A, 0x49, 0x49, 0x30], // '6'
        [0x01, 0x71, 0x09, 0x05, 0x03], // '7'
        [0x36, 0x49, 0x49, 0x49, 0x36], // '8'
        [0x06, 0x49, 0x49, 0x29, 0x1E], // '9'
        [0x00, 0x36, 0x36, 0x00, 0x00], // ':'
        [0x00, 0x56, 0x36, 0x00, 0x00], // ';'
        [0x08, 0x14, 0x22, 0x41, 0x00], // '<'
        [0x14, 0x14, 0x14, 0x14, 0x14], // '='
        [0x00, 0x41, 0x22, 0x14, 0x08], // '>'
        [0x02, 0x01, 0x51, 0x09, 0x06], // '?'
        [0x32, 0x49, 0x79, 0x41, 0x3E], // '@'
        [0x7E, 0x11, 0x11, 0x11, 0x7E], // 'A'
        [0x7F, 0x49, 0x49, 0x49, 0x36], // 'B'
        [0x3E, 0x41, 0x41, 0x41, 0x22], // 'C'
        [0x7F, 0x41, 0x41, 0x22, 0x1C], // 'D'
        [0x7F, 0x49, 0x49, 0x49, 0x41], // 'E'
        [0x7F, 0x09, 0x09, 0x09, 0x01], // 'F'
        [0x3E, 0x41, 0x49, 0x49, 0x7A], // 'G'
        [0x7F, 0x08, 0x08, 0x08, 0x7F], // 'H'
        [0x00, 0x41, 0x7F, 0x41, 0x00], // 'I'
        [0x20, 0x40, 0x41, 0x3F, 0x01], // 'J'
        [0x7F, 0x08, 0x14, 0x22, 0x41], // 'K'
        [0x7F, 0x40, 0x40, 0x40, 0x40], // 'L'
        [0x7F, 0x02, 0x0C, 0x02, 0x7F], // 'M'
        [0x7F, 0x04, 0x08, 0x10, 0x7F], // 'N'
        [0x3E, 0x41, 0x41, 0x41, 0x3E], // 'O'
        [0x7F, 0x09, 0x09, 0x09, 0x06], // 'P'
        [0x3E, 0x41, 0x51, 0x21, 0x5E], // 'Q'
        [0x7F, 0x09, 0x19, 0x29, 0x46], // 'R'
        [0x46, 0x49, 0x49, 0x49, 0x31], // 'S'
        [0x01, 0x01, 0x7F, 0x01, 0x01], // 'T'
        [0x3F, 0x40, 0x40, 0x40, 0x3F], // 'U'
        [0x1F, 0x20, 0x40, 0x20, 0x1F], // 'V'
        [0x3F, 0x40, 0x38, 0x40, 0x3F], // 'W'
        [0x63, 0x14, 0x08, 0x14, 0x63], // 'X'
        [0x03, 0x04, 0x78, 0x04, 0x03], // 'Y'
        [0x61, 0x51, 0x49, 0x45, 0x43], // 'Z'
        [0x00, 0x7F, 0x41, 0x41, 0x00], // '['
        [0x02, 0x04, 0x08, 0x10, 0x20], // '\'
        [0x00, 0x41, 0x41, 0x7F, 0x00], // ']'
        [0x04, 0x02, 0x01, 0x02, 0x04], // '^'
        [0x40, 0x40, 0x40, 0x40, 0x40], // '_'
        [0x00, 0x01, 0x02, 0x04, 0x00], // '`'
        [0x20, 0x54, 0x54, 0x54, 0x78], // 'a'
        [0x7F, 0x48, 0x44, 0x44, 0x38], // 'b'
        [0x38, 0x44, 0x44, 0x44, 0x20], // 'c'
        [0x38, 0x44, 0x44, 0x48, 0x7F], // 'd'
        [0x38, 0x54, 0x54, 0x54, 0x18], // 'e'
        [0x08, 0x7E, 0x09, 0x01, 0x02], // 'f'
        [0x0C, 0x52, 0x52, 0x52, 0x3E], // 'g'
        [0x7F, 0x08, 0x04, 0x04, 0x78], // 'h'
        [0x00, 0x44, 0x7D, 0x40, 0x00], // 'i'
        [0x20, 0x40, 0x40, 0x3D, 0x00], // 'j'
        [0x7F, 0x10, 0x28, 0x44, 0x00], // 'k'
        [0x00, 0x41, 0x7F, 0x40, 0x00], // 'l'
        [0x7C, 0x04, 0x18, 0x04, 0x78], // 'm'
        [0x7C, 0x08, 0x04, 0x04, 0x78], // 'n'
        [0x38, 0x44, 0x44, 0x44, 0x38], // 'o'
        [0x7C, 0x14, 0x14, 0x14, 0x08], // 'p'
        [0x08, 0x14, 0x14, 0x18, 0x7C], // 'q'
        [0x7C, 0x08, 0x04, 0x04, 0x08], // 'r'
        [0x48, 0x54, 0x54, 0x54, 0x20], // 's'
        [0x04, 0x3F, 0x44, 0x40, 0x20], // 't'
        [0x3C, 0x40, 0x40, 0x20, 0x7C], // 'u'
        [0x1C, 0x20, 0x40, 0x20, 0x1C], // 'v'
        [0x3C, 0x40, 0x30, 0x40, 0x3C], // 'w'
        [0x44, 0x28, 0x10, 0x28, 0x44], // 'x'
        [0x0C, 0x50, 0x50, 0x50, 0x3C], // 'y'
        [0x44, 0x64, 0x54, 0x4C, 0x44], // 'z'
        [0x00, 0x08, 0x36, 0x41, 0x00], // '{'
        [0x00, 0x00, 0x7F, 0x00, 0x00], // '|'
        [0x00, 0x41, 0x36, 0x08, 0x00], // '}'
        [0x08, 0x08, 0x2A, 0x1C, 0x08], // '~'
    ];

    // Function to send a command to the OLED
    export function sendCommand(command: number) {
        pins.digitalWritePin(DC, 0);  // Set DC low to indicate command
        pins.digitalWritePin(CS, 0);  // Set CS low to start communication
        pins.spiWrite(command);  // Send command via SPI
        pins.digitalWritePin(CS, 1);  // Set CS high to end communication
    }

    // Function to send data to the OLED
    export function sendData(data: number) {
        pins.digitalWritePin(DC, 1);  // Set DC high to indicate data
        pins.digitalWritePin(CS, 0);  // Set CS low to start communication
        pins.spiWrite(data);  // Send data via SPI
        pins.digitalWritePin(CS, 1);  // Set CS high to end communication
    }

    //% block="initialise OLED display"
    export function initialiseOLED() {
        resetDisplay();

        // OLED initialisation sequence (SSD1306 controller)
        sendCommand(0xAE);  // Display OFF
        sendCommand(0xD5);  // Set Display Clock Divide Ratio/Oscillator Frequency
        sendCommand(0x80);  // Display divide ratio/oscillator frequency
        sendCommand(0xA8);  // Set Multiplex Ratio
        sendCommand(0x3F);  // 1/64 duty (for 128x64 OLED)
        sendCommand(0xD3);  // Set Display Offset
        sendCommand(0x00);  // No offset
        sendCommand(0x40);  // Set Display Start Line
        sendCommand(0x8D);  // Charge Pump Setting
        sendCommand(0x14);  // Enable charge pump
        sendCommand(0x20);  // Set Memory Addressing Mode
        sendCommand(0x00);  // Horizontal Addressing Mode
        sendCommand(0xA1);  // Set Segment Re-map (A1 or A0)
        sendCommand(0xC8);  // Set COM Output Scan Direction
        sendCommand(0xDA);  // Set COM Pins Hardware Configuration
        sendCommand(0x12);  // Alternative COM pin configuration, disable COM left/right remap
        sendCommand(0x81);  // Set Contrast Control
        sendCommand(0xCF);  // Max contrast
        sendCommand(0xD9);  // Set Pre-charge Period
        sendCommand(0xF1);  // Pre-charge period
        sendCommand(0xDB);  // Set VCOMH Deselect Level
        sendCommand(0x40);  // 0.77xVcc
        sendCommand(0xA4);  // Entire Display ON (resume from RAM content)
        sendCommand(0xA6);  // Set Normal Display (A6 = normal, A7 = inverse)
        sendCommand(0xAF);  // Display ON
    }

    //% block="reset OLED display"
    export function resetDisplay() {
        pins.digitalWritePin(RES, 0);  // Pull RES low
        basic.pause(100);  // Wait 100ms
        pins.digitalWritePin(RES, 1);  // Pull RES high
    }

    //% block="fill screen with data"
    export function fillScreen() {
        // Fill the screen with data (all pixels ON in this case)
        for (let i = 0; i < 1024; i++) {  // For a 128x64 pixel OLED, 1024 bytes are needed
            sendData(0xFF);  // Set all pixels in each byte to 1 (white)
        }
    }

    //% block="show text %text" weight=90
    export function showText(text: string) {
        // Iterate over each character in the input text
        for (let i = 0; i < text.length; i++) {
            let charIndex = text.charCodeAt(i) - 32;  // Get the character's ASCII code
            if (charIndex < 0 || charIndex > 94) continue;  // Only process characters in the font array

            let charData = font[charIndex];  // Get the font data for the character

            // Send the 5-byte font data for the character
            for (let j = 0; j < 5; j++) {
                sendData(charData[j]);
            }
            // Send a blank column (for spacing between characters)
            sendData(0x00);
        }
    }
}
